# coding: utf-8

"""
    Leetcode API

    Leetcode API implementation.  # noqa: E501

    OpenAPI spec version: 1.0.1-1
    Contact: pv.safronov@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

from leetcode.models.base_submission_result import (  # noqa: F401,E501
    BaseSubmissionResult,
)



class SubmissionResult(BaseSubmissionResult): #Modified

    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "compare_result": "str",
        "std_output": "str",
        "last_testcase": "str",
        "expected_output": "str",
        "input_formatted": "str",
        "input": "str",
    }
    if hasattr(BaseSubmissionResult, "swagger_types"):
        swagger_types.update(BaseSubmissionResult.swagger_types)

    attribute_map = {
        "compare_result": "compare_result",
        "std_output": "std_output",
        "last_testcase": "last_testcase",
        "expected_output": "expected_output",
        "input_formatted": "input_formatted",
        "input": "input",
    }
    if hasattr(BaseSubmissionResult, "attribute_map"):
        attribute_map.update(BaseSubmissionResult.attribute_map)

    def __init__(
            self,
            compare_result=None,
            std_output=None,
            last_testcase=None,
            expected_output=None,
            input_formatted=None,
            input=None,
            *args,
            **kwargs
    ):  # noqa: E501
        """SubmissionResult - a model defined in Swagger"""  # noqa: E501
        self._compare_result = compare_result or ""
        self._std_output = None
        self._last_testcase = None
        self._expected_output = None
        self._input_formatted = input_formatted or kwargs.get("submission_result", {}).get("input_formatted", "")
        self._input = None
        self.discriminator = None
        self.std_output = std_output
        self.last_testcase = last_testcase
        self.expected_output = expected_output
        self.input_formatted = input_formatted
        self.input = input
        BaseSubmissionResult.__init__(self, *args, **kwargs)

    @property
    def compare_result(self):
        """Gets the compare_result of this SubmissionResult.  # noqa: E501


        :return: The compare_result of this SubmissionResult.  # noqa: E501
        :rtype: str
        """
        return self._compare_result

    @compare_result.setter
    def compare_result(self, compare_result):
        """Sets the compare_result of this SubmissionResult.


        :param compare_result: The compare_result of this SubmissionResult.  # noqa: E501
        :type: str
        """
        # if compare_result is None:
            # raise ValueError(
            #     "Invalid value for `compare_result`, must not be `None`"
            # )  # noqa: E501

        self._compare_result = compare_result

    @property
    def std_output(self):
        """Gets the std_output of this SubmissionResult.  # noqa: E501


        :return: The std_output of this SubmissionResult.  # noqa: E501
        :rtype: str
        """
        return self._std_output

    @std_output.setter
    def std_output(self, std_output):
        """Sets the std_output of this SubmissionResult.


        :param std_output: The std_output of this SubmissionResult.  # noqa: E501
        :type: str
        """
        if std_output is None:
            raise ValueError(
                "Invalid value for `std_output`, must not be `None`"
            )  # noqa: E501

        self._std_output = std_output

    @property
    def last_testcase(self):
        """Gets the last_testcase of this SubmissionResult.  # noqa: E501


        :return: The last_testcase of this SubmissionResult.  # noqa: E501
        :rtype: str
        """
        return self._last_testcase

    @last_testcase.setter
    def last_testcase(self, last_testcase):
        """Sets the last_testcase of this SubmissionResult.


        :param last_testcase: The last_testcase of this SubmissionResult.  # noqa: E501
        :type: str
        """
        if last_testcase is None:
            raise ValueError(
                "Invalid value for `last_testcase`, must not be `None`"
            )  # noqa: E501

        self._last_testcase = last_testcase

    @property
    def expected_output(self):
        """Gets the expected_output of this SubmissionResult.  # noqa: E501


        :return: The expected_output of this SubmissionResult.  # noqa: E501
        :rtype: str
        """
        return self._expected_output

    @expected_output.setter
    def expected_output(self, expected_output):
        """Sets the expected_output of this SubmissionResult.


        :param expected_output: The expected_output of this SubmissionResult.  # noqa: E501
        :type: str
        """
        if expected_output is None:
            raise ValueError(
                "Invalid value for `expected_output`, must not be `None`"
            )  # noqa: E501

        self._expected_output = expected_output

    @property
    def input_formatted(self):
        """Gets the input_formatted of this SubmissionResult.  # noqa: E501"""
        return self._input_formatted

    @input_formatted.setter
    def input_formatted(self, input_formatted):
        """Sets the input_formatted of this SubmissionResult.  # noqa: E501"""
        if input_formatted is None:
            # Provide a default value if input_formatted is None
            input_formatted = ""

        self._input_formatted = input_formatted

    @property
    def input(self):
        """Gets the input of this SubmissionResult.  # noqa: E501"""
        return self._input

    @input.setter
    def input(self, input):
        """Sets the input of this SubmissionResult.  # noqa: E501"""
        if input is None:
            # Provide a default value if input is None
            input = ""

        self._input = input


    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(SubmissionResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubmissionResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
